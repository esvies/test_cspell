---
name: Housekeeping

on:
  push:
    branches:
      - main
    paths-ignore:
      - "cspell.json"
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  validating:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Cache PIP
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-cache-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-cache-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Dependencies
        run: |
          npm install -g cspell markdownlint-cli &
          python -m pip install yamllint &
          wait

      - name: Update cspell.json with Usernames
        id: update_cspell
        env:
          AUTH_TOKEN: ${{ secrets.ORG_READ_TOKEN }}
          ORG_NAME: ${{ github.repository_owner }}
        run: python .github/workflows/update_cspell.py

      - name: Check for cspell.json Changes
        id: check_cspell_changes
        run: |
          if [[ $(git diff --name-only cspell.json) ]]; then
            echo "changes_detected=true" >> $GITHUB_ENV
          else
            echo "changes_detected=false" >> $GITHUB_ENV
          fi

      - name: Commit changes using GitHub API
        if: env.changes_detected == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Committing changes using GitHub API..."

          # Extract the branch name from the GitHub context
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          echo "Branch name detected: $BRANCH_NAME"

          # Process changed files
          FILES_CHANGED=$(git status --porcelain | awk '{print $2}')
          for file in $FILES_CHANGED; do
            CONTENT=$(base64 -w 0 "$file")
            FILENAME=$(basename "$file")

            # Fetch SHA if the file already exists
            SHA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/contents/$file?ref=$BRANCH_NAME | jq -r .sha)

            # Handle new file creation
            if [ "$SHA" == "null" ]; then
              SHA=""
            fi

            # Send API request to update or create file
            RESPONSE=$(curl -s -X PUT -H "Authorization: token $GITHUB_TOKEN" \
              -d "{\"message\":\"Update $FILENAME\", \"content\":\"$CONTENT\", \"branch\":\"$BRANCH_NAME\", \"sha\":\"$SHA\"}" \
              https://api.github.com/repos/${{ github.repository }}/contents/$file)

            # Check for errors
            if echo "$RESPONSE" | grep -q "message"; then
              echo "Error updating $FILENAME: $(echo "$RESPONSE" | jq -r .message)"
              exit 1
            else
              echo "Successfully updated $FILENAME"
            fi
          done

      - name: Run cspell
        run: cspell --config ./cspell.json "./**/*.md"

      - name: Run markdownlint
        run: markdownlint "./**/*.md"

      - name: Run yamllint
        run: yamllint .
